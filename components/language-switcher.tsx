"use client"

import * as React from "react"
import { Globe, Check } from "lucide-react"
import { Button } from "@/components/ui/button"
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from "@/components/ui/dropdown-menu"

const languages = [
  {
    code: "en",
    name: "English",
    nativeName: "English",
    flag: "üá∫üá∏",
    translations: {
      hero: {
        title: "Smart Health Surveillance & Early Warning",
        subtitle:
          "Empowering communities with AI-driven health monitoring, real-time disease tracking, and predictive analytics for better public health outcomes across India.",
        exploreBtn: "Explore Dashboard",
        learnBtn: "Learn More",
      },
      nav: {
        home: "Home",
        features: "Features",
        dashboard: "Dashboard",
        aiDetection: "AI Detection",
        about: "About",
        contact: "Contact",
      },
    },
  },
  {
    code: "hi",
    name: "‡§π‡§ø‡§Ç‡§¶‡•Ä",
    nativeName: "‡§π‡§ø‡§Ç‡§¶‡•Ä",
    flag: "üáÆüá≥",
    translations: {
      hero: {
        title: "‡§∏‡•ç‡§Æ‡§æ‡§∞‡•ç‡§ü ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§®‡§ø‡§ó‡§∞‡§æ‡§®‡•Ä ‡§î‡§∞ ‡§™‡•ç‡§∞‡§æ‡§∞‡§Ç‡§≠‡§ø‡§ï ‡§ö‡•á‡§§‡§æ‡§µ‡§®‡•Ä",
        subtitle:
          "‡§≠‡§æ‡§∞‡§§ ‡§≠‡§∞ ‡§Æ‡•á‡§Ç ‡§¨‡•á‡§π‡§§‡§∞ ‡§∏‡§æ‡§∞‡•ç‡§µ‡§ú‡§®‡§ø‡§ï ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§™‡§∞‡§ø‡§£‡§æ‡§Æ‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è AI-‡§∏‡§Ç‡§ö‡§æ‡§≤‡§ø‡§§ ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§®‡§ø‡§ó‡§∞‡§æ‡§®‡•Ä, ‡§µ‡§æ‡§∏‡•ç‡§§‡§µ‡§ø‡§ï ‡§∏‡§Æ‡§Ø ‡§∞‡•ã‡§ó ‡§ü‡•ç‡§∞‡•à‡§ï‡§ø‡§Ç‡§ó ‡§î‡§∞ ‡§≠‡§µ‡§ø‡§∑‡•ç‡§Ø‡§µ‡§æ‡§£‡•Ä ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§ï‡•á ‡§∏‡§æ‡§• ‡§∏‡§Æ‡•Å‡§¶‡§æ‡§Ø‡•ã‡§Ç ‡§ï‡•ã ‡§∏‡§∂‡§ï‡•ç‡§§ ‡§¨‡§®‡§æ‡§®‡§æ‡•§",
        exploreBtn: "‡§°‡•à‡§∂‡§¨‡•ã‡§∞‡•ç‡§° ‡§¶‡•á‡§ñ‡•á‡§Ç",
        learnBtn: "‡§î‡§∞ ‡§ú‡§æ‡§®‡•á‡§Ç",
      },
      nav: {
        home: "‡§π‡•ã‡§Æ",
        features: "‡§µ‡§ø‡§∂‡•á‡§∑‡§§‡§æ‡§è‡§Ç",
        dashboard: "‡§°‡•à‡§∂‡§¨‡•ã‡§∞‡•ç‡§°",
        aiDetection: "AI ‡§™‡§π‡§ö‡§æ‡§®",
        about: "‡§π‡§Æ‡§æ‡§∞‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç",
        contact: "‡§∏‡§Ç‡§™‡§∞‡•ç‡§ï",
      },
    },
  },
  {
    code: "as",
    name: "‡¶Ö‡¶∏‡¶Æ‡ßÄ‡¶Ø‡¶º‡¶æ",
    nativeName: "‡¶Ö‡¶∏‡¶Æ‡ßÄ‡¶Ø‡¶º‡¶æ",
    flag: "üáÆüá≥",
    translations: {
      hero: {
        title: "‡¶∏‡ßç‡¶Æ‡¶æ‡ß∞‡ßç‡¶ü ‡¶∏‡ßç‡¶¨‡¶æ‡¶∏‡ßç‡¶•‡ßç‡¶Ø ‡¶®‡¶ø‡ß∞‡ßÄ‡¶ï‡ßç‡¶∑‡¶£ ‡¶Ü‡ß∞‡ßÅ ‡¶Ü‡¶ó‡¶§‡ßÄ‡¶Ø‡¶º‡¶æ ‡¶∏‡¶§‡ß∞‡ßç‡¶ï‡¶¨‡¶æ‡¶£‡ßÄ",
        subtitle:
          "‡¶≠‡¶æ‡ß∞‡¶§‡¶ú‡ßÅ‡ß∞‡¶ø ‡¶â‡¶®‡ßç‡¶®‡¶§ ‡¶ú‡¶®‡¶∏‡ßç‡¶¨‡¶æ‡¶∏‡ßç‡¶•‡ßç‡¶Ø ‡¶´‡¶≤‡¶æ‡¶´‡¶≤‡ß∞ ‡¶¨‡¶æ‡¶¨‡ßá AI-‡¶ö‡¶æ‡¶≤‡¶ø‡¶§ ‡¶∏‡ßç‡¶¨‡¶æ‡¶∏‡ßç‡¶•‡ßç‡¶Ø ‡¶®‡¶ø‡ß∞‡ßÄ‡¶ï‡ßç‡¶∑‡¶£, ‡¶™‡ßç‡ß∞‡¶ï‡ßÉ‡¶§ ‡¶∏‡¶Æ‡¶Ø‡¶º‡ß∞ ‡ß∞‡ßã‡¶ó ‡¶ü‡ßç‡ß∞‡ßá‡¶ï‡¶ø‡¶Ç ‡¶Ü‡ß∞‡ßÅ ‡¶≠‡ß±‡¶ø‡¶∑‡ßç‡¶Ø‡¶¶‡ßç‡¶¨‡¶æ‡¶£‡ßÄ‡¶Æ‡ßÇ‡¶≤‡¶ï ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£‡ß∞ ‡¶∏‡ßà‡¶§‡ßá ‡¶∏‡¶Æ‡ßç‡¶™‡ßç‡ß∞‡¶¶‡¶æ‡¶Ø‡¶º‡¶∏‡¶Æ‡ßÇ‡¶π‡¶ï ‡¶∂‡¶ï‡ßç‡¶§‡¶ø‡¶∂‡¶æ‡¶≤‡ßÄ ‡¶ï‡ß∞‡¶æ‡•§",
        exploreBtn: "‡¶°‡ßá‡¶õ‡¶¨‡ß∞‡ßç‡¶° ‡¶ö‡¶æ‡¶ì‡¶ï",
        learnBtn: "‡¶Ö‡¶ß‡¶ø‡¶ï ‡¶ú‡¶æ‡¶®‡¶ï",
      },
      nav: {
        home: "‡¶ò‡ß∞",
        features: "‡¶¨‡ßà‡¶∂‡¶ø‡¶∑‡ßç‡¶ü‡ßç‡¶Ø‡¶∏‡¶Æ‡ßÇ‡¶π",
        dashboard: "‡¶°‡ßá‡¶õ‡¶¨‡ß∞‡ßç‡¶°",
        aiDetection: "AI ‡¶ö‡¶ø‡¶®‡¶æ‡¶ï‡ßç‡¶§‡¶ï‡ß∞‡¶£",
        about: "‡¶Ü‡¶Æ‡¶æ‡ß∞ ‡¶¨‡¶ø‡¶∑‡¶Ø‡¶º‡ßá",
        contact: "‡¶Ø‡ßã‡¶ó‡¶æ‡¶Ø‡ßã‡¶ó",
      },
    },
  },
  {
    code: "bn",
    name: "‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ",
    nativeName: "‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ",
    flag: "üáÆüá≥",
    translations: {
      hero: {
        title: "‡¶∏‡ßç‡¶Æ‡¶æ‡¶∞‡ßç‡¶ü ‡¶∏‡ßç‡¶¨‡¶æ‡¶∏‡ßç‡¶•‡ßç‡¶Ø ‡¶®‡¶ø‡¶∞‡ßÄ‡¶ï‡ßç‡¶∑‡¶£ ‡¶ì ‡¶™‡ßç‡¶∞‡¶æ‡¶•‡¶Æ‡¶ø‡¶ï ‡¶∏‡¶§‡¶∞‡ßç‡¶ï‡¶§‡¶æ",
        subtitle:
          "‡¶≠‡¶æ‡¶∞‡¶§ ‡¶ú‡ßÅ‡¶°‡¶º‡ßá ‡¶â‡¶®‡ßç‡¶®‡¶§ ‡¶ú‡¶®‡¶∏‡ßç‡¶¨‡¶æ‡¶∏‡ßç‡¶•‡ßç‡¶Ø ‡¶´‡¶≤‡¶æ‡¶´‡¶≤‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø AI-‡¶ö‡¶æ‡¶≤‡¶ø‡¶§ ‡¶∏‡ßç‡¶¨‡¶æ‡¶∏‡ßç‡¶•‡ßç‡¶Ø ‡¶®‡¶ø‡¶∞‡ßÄ‡¶ï‡ßç‡¶∑‡¶£, ‡¶∞‡¶ø‡¶Ø‡¶º‡ßá‡¶≤-‡¶ü‡¶æ‡¶á‡¶Æ ‡¶∞‡ßã‡¶ó ‡¶ü‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶ï‡¶ø‡¶Ç ‡¶è‡¶¨‡¶Ç ‡¶≠‡¶¨‡¶ø‡¶∑‡ßç‡¶Ø‡¶¶‡ßç‡¶¨‡¶æ‡¶£‡ßÄ‡¶Æ‡ßÇ‡¶≤‡¶ï ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶∏‡¶Æ‡ßç‡¶™‡ßç‡¶∞‡¶¶‡¶æ‡¶Ø‡¶º‡¶ó‡ßÅ‡¶≤‡¶ø‡¶ï‡ßá ‡¶ï‡ßç‡¶∑‡¶Æ‡¶§‡¶æ‡¶Ø‡¶º‡¶®‡•§",
        exploreBtn: "‡¶°‡ßç‡¶Ø‡¶æ‡¶∂‡¶¨‡ßã‡¶∞‡ßç‡¶° ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶®",
        learnBtn: "‡¶Ü‡¶∞‡¶ì ‡¶ú‡¶æ‡¶®‡ßÅ‡¶®",
      },
      nav: {
        home: "‡¶π‡ßã‡¶Æ",
        features: "‡¶¨‡ßà‡¶∂‡¶ø‡¶∑‡ßç‡¶ü‡ßç‡¶Ø",
        dashboard: "‡¶°‡ßç‡¶Ø‡¶æ‡¶∂‡¶¨‡ßã‡¶∞‡ßç‡¶°",
        aiDetection: "AI ‡¶∏‡¶®‡¶æ‡¶ï‡ßç‡¶§‡¶ï‡¶∞‡¶£",
        about: "‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï‡ßá",
        contact: "‡¶Ø‡ßã‡¶ó‡¶æ‡¶Ø‡ßã‡¶ó",
      },
    },
  },
]

// Language Context
const LanguageContext = React.createContext<{
  currentLanguage: string
  setLanguage: (lang: string) => void
  t: (key: string) => string
}>({
  currentLanguage: "en",
  setLanguage: () => {},
  t: () => "",
})

export function LanguageProvider({ children }: { children: React.ReactNode }) {
  const [currentLanguage, setCurrentLanguage] = React.useState("en")

  React.useEffect(() => {
    const saved = localStorage.getItem("healthwatch-language")
    if (saved && languages.find((lang) => lang.code === saved)) {
      setCurrentLanguage(saved)
    }
  }, [])

  const setLanguage = (langCode: string) => {
    setCurrentLanguage(langCode)
    localStorage.setItem("healthwatch-language", langCode)
  }

  const t = (key: string) => {
    const lang = languages.find((l) => l.code === currentLanguage)
    if (!lang) return key

    const keys = key.split(".")
    let value: any = lang.translations

    for (const k of keys) {
      value = value?.[k]
    }

    return value || key
  }

  return <LanguageContext.Provider value={{ currentLanguage, setLanguage, t }}>{children}</LanguageContext.Provider>
}

export function useLanguage() {
  const context = React.useContext(LanguageContext)
  if (!context) {
    throw new Error("useLanguage must be used within a LanguageProvider")
  }
  return context
}

export function LanguageSwitcher() {
  const { currentLanguage, setLanguage } = useLanguage()
  const [mounted, setMounted] = React.useState(false)

  React.useEffect(() => {
    setMounted(true)
  }, [])

  if (!mounted) {
    return null
  }

  const handleLanguageChange = (langCode: string) => {
    setLanguage(langCode)
  }

  const currentLang = languages.find((lang) => lang.code === currentLanguage)

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button variant="ghost" size="sm" className="h-9 px-2">
          <Globe className="h-4 w-4 mr-2" />
          <span className="hidden sm:inline">{currentLang?.nativeName}</span>
          <span className="sm:hidden">{currentLang?.flag}</span>
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent align="end" className="w-48">
        {languages.map((language) => (
          <DropdownMenuItem
            key={language.code}
            onClick={() => handleLanguageChange(language.code)}
            className="cursor-pointer flex items-center justify-between"
          >
            <div className="flex items-center">
              <span className="mr-2">{language.flag}</span>
              <span>{language.nativeName}</span>
            </div>
            {currentLanguage === language.code && <Check className="h-4 w-4 text-primary" />}
          </DropdownMenuItem>
        ))}
      </DropdownMenuContent>
    </DropdownMenu>
  )
}
