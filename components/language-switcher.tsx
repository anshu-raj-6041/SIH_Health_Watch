"use client"

import * as React from "react"
import { Globe, Check } from "lucide-react"
import { Button } from "@/components/ui/button"
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from "@/components/ui/dropdown-menu"

const languages = [
  {
    code: "en",
    name: "English",
    nativeName: "English",
    flag: "ЁЯЗ║ЁЯЗ╕",
    translations: {
      hero: {
        title: "Smart Health Surveillance & Early Warning",
        subtitle:
          "Empowering communities with AI-driven health monitoring, real-time disease tracking, and predictive analytics for better public health outcomes across India.",
        exploreBtn: "Explore Dashboard",
        learnBtn: "Learn More",
      },
      nav: {
        home: "Home",
        features: "Features",
        dashboard: "Dashboard",
        aiDetection: "AI Detection",
        about: "About",
        contact: "Contact",
        symptoms: "Symptoms",
      },
      symptoms: {
        title: "Symptom Report",
        subtitle: "Record patient symptoms and basic health indicators.",
        patientInfo: "Patient Information",
        patientName: "Patient Name",
        patientNamePlaceholder: "Enter patient name",
        age: "Age",
        agePlaceholder: "Age",
        village: "Village",
        villagePlaceholder: "Select village",
        contactNumber: "Contact Number",
        contactNumberPlaceholder: "Phone number",
        symptomsTitle: "Symptoms (check all that apply)",
        additionalNotes: "Additional Notes",
        additionalNotesPlaceholder: "Any additional observations or notes...",
        submitButton: "Submit Report",
        submitting: "Submitting...",
        successMessage: "Symptom report submitted successfully!",
        errorMessage: "Error submitting report. Please try again.",
      },
    },
  },
  {
    code: "hi",
    name: "рд╣рд┐рдВрджреА",
    nativeName: "рд╣рд┐рдВрджреА",
    flag: "ЁЯЗоЁЯЗ│",
    translations: {
      hero: {
        title: "рд╕реНрдорд╛рд░реНрдЯ рд╕реНрд╡рд╛рд╕реНрдереНрдп рдирд┐рдЧрд░рд╛рдиреА рдФрд░ рдкреНрд░рд╛рд░рдВрднрд┐рдХ рдЪреЗрддрд╛рд╡рдиреА",
        subtitle:
          "рднрд╛рд░рдд рднрд░ рдореЗрдВ рдмреЗрд╣рддрд░ рд╕рд╛рд░реНрд╡рдЬрдирд┐рдХ рд╕реНрд╡рд╛рд╕реНрдереНрдп рдкрд░рд┐рдгрд╛рдореЛрдВ рдХреЗ рд▓рд┐рдП AI-рд╕рдВрдЪрд╛рд▓рд┐рдд рд╕реНрд╡рд╛рд╕реНрдереНрдп рдирд┐рдЧрд░рд╛рдиреА, рд╡рд╛рд╕реНрддрд╡рд┐рдХ рд╕рдордп рд░реЛрдЧ рдЯреНрд░реИрдХрд┐рдВрдЧ рдФрд░ рднрд╡рд┐рд╖реНрдпрд╡рд╛рдгреА рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдХреЗ рд╕рд╛рде рд╕рдореБрджрд╛рдпреЛрдВ рдХреЛ рд╕рд╢рдХреНрдд рдмрдирд╛рдирд╛ред",
        exploreBtn: "рдбреИрд╢рдмреЛрд░реНрдб рджреЗрдЦреЗрдВ",
        learnBtn: "рдФрд░ рдЬрд╛рдиреЗрдВ",
      },
      nav: {
        home: "рд╣реЛрдо",
        features: "рд╡рд┐рд╢реЗрд╖рддрд╛рдПрдВ",
        dashboard: "рдбреИрд╢рдмреЛрд░реНрдб",
        aiDetection: "AI рдкрд╣рдЪрд╛рди",
        about: "рд╣рдорд╛рд░реЗ рдмрд╛рд░реЗ рдореЗрдВ",
        contact: "рд╕рдВрдкрд░реНрдХ",
        symptoms: "рд▓рдХреНрд╖рдг",
      },
      symptoms: {
        title: "рд▓рдХреНрд╖рдг рд░рд┐рдкреЛрд░реНрдЯ",
        subtitle: "рд░реЛрдЧреА рдХреЗ рд▓рдХреНрд╖рдг рдФрд░ рдмреБрдирд┐рдпрд╛рджреА рд╕реНрд╡рд╛рд╕реНрдереНрдп рд╕рдВрдХреЗрддрдХ рджрд░реНрдЬ рдХрд░реЗрдВред",
        patientInfo: "рд░реЛрдЧреА рдХреА рдЬрд╛рдирдХрд╛рд░реА",
        patientName: "рд░реЛрдЧреА рдХрд╛ рдирд╛рдо",
        patientNamePlaceholder: "рд░реЛрдЧреА рдХрд╛ рдирд╛рдо рджрд░реНрдЬ рдХрд░реЗрдВ",
        age: "рдЖрдпреБ",
        agePlaceholder: "рдЖрдпреБ",
        village: "рдЧрд╛рдБрд╡",
        villagePlaceholder: "рдЧрд╛рдБрд╡ рдЪреБрдиреЗрдВ",
        contactNumber: "рд╕рдВрдкрд░реНрдХ рдирдВрдмрд░",
        contactNumberPlaceholder: "рдлреЛрди рдирдВрдмрд░",
        symptomsTitle: "рд▓рдХреНрд╖рдг (рд╕рднреА рд▓рд╛рдЧреВ рд╡рд┐рдХрд▓реНрдкреЛрдВ рдХреЛ рдЪреБрдиреЗрдВ)",
        additionalNotes: "рдЕрддрд┐рд░рд┐рдХреНрдд рдиреЛрдЯреНрд╕",
        additionalNotesPlaceholder: "рдХреЛрдИ рдЕрддрд┐рд░рд┐рдХреНрдд рдЕрд╡рд▓реЛрдХрди рдпрд╛ рдиреЛрдЯреНрд╕...",
        submitButton: "рд░рд┐рдкреЛрд░реНрдЯ рдЬрдорд╛ рдХрд░реЗрдВ",
        submitting: "рдЬрдорд╛ рд╣реЛ рд░рд╣рд╛ рд╣реИ...",
        successMessage: "рд▓рдХреНрд╖рдг рд░рд┐рдкреЛрд░реНрдЯ рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рдЬрдорд╛ рд╣реЛ рдЧрдИ!",
        errorMessage: "рд░рд┐рдкреЛрд░реНрдЯ рдЬрдорд╛ рдХрд░рдиреЗ рдореЗрдВ рддреНрд░реБрдЯрд┐ред рдХреГрдкрдпрд╛ рдкреБрдирдГ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред",
      },
    },
  },
  {
    code: "as",
    name: "ржЕрж╕ржорзАржпрж╝рж╛",
    nativeName: "ржЕрж╕ржорзАржпрж╝рж╛",
    flag: "ЁЯЗоЁЯЗ│",
    translations: {
      hero: {
        title: "рж╕рзНржорж╛рз░рзНржЯ рж╕рзНржмрж╛рж╕рзНржерзНржп ржирж┐рз░рзАржХрзНрж╖ржг ржЖрз░рзБ ржЖржЧрждрзАржпрж╝рж╛ рж╕рждрз░рзНржХржмрж╛ржгрзА",
        subtitle:
          "ржнрж╛рз░рждржЬрзБрз░рж┐ ржЙржирзНржиржд ржЬржирж╕рзНржмрж╛рж╕рзНржерзНржп ржлрж▓рж╛ржлрж▓рз░ ржмрж╛ржмрзЗ AI-ржЪрж╛рж▓рж┐ржд рж╕рзНржмрж╛рж╕рзНржерзНржп ржирж┐рз░рзАржХрзНрж╖ржг, ржкрзНрз░ржХрзГржд рж╕ржоржпрж╝рз░ рз░рзЛржЧ ржЯрзНрз░рзЗржХрж┐ржВ ржЖрз░рзБ ржнрз▒рж┐рж╖рзНржпржжрзНржмрж╛ржгрзАржорзВрж▓ржХ ржмрж┐рж╢рзНрж▓рзЗрж╖ржгрз░ рж╕рзИрждрзЗ рж╕ржорзНржкрзНрз░ржжрж╛ржпрж╝рж╕ржорзВрж╣ржХ рж╢ржХрзНрждрж┐рж╢рж╛рж▓рзА ржХрз░рж╛ред",
        exploreBtn: "ржбрзЗржЫржмрз░рзНржб ржЪрж╛ржУржХ",
        learnBtn: "ржЕржзрж┐ржХ ржЬрж╛ржиржХ",
      },
      nav: {
        home: "ржШрз░",
        features: "ржмрзИрж╢рж┐рж╖рзНржЯрзНржпрж╕ржорзВрж╣",
        dashboard: "ржбрзЗржЫржмрз░рзНржб",
        aiDetection: "AI ржЪрж┐ржирж╛ржХрзНрждржХрз░ржг",
        about: "ржЖржорж╛рз░ ржмрж┐рж╖ржпрж╝рзЗ",
        contact: "ржпрзЛржЧрж╛ржпрзЛржЧ",
        symptoms: "рж▓ржХрзНрж╖ржг",
      },
      symptoms: {
        title: "рж▓ржХрзНрж╖ржг ржкрзНрз░рждрж┐ржмрзЗржжржи",
        subtitle: "рз░рзЛржЧрзАрз░ рж▓ржХрзНрж╖ржг ржЖрз░рзБ ржорзМрж▓рж┐ржХ рж╕рзНржмрж╛рж╕рзНржерзНржп рж╕рзВржЪржХрж╕ржорзВрж╣ рз░рзЗржХрз░рзНржб ржХрз░ржХред",
        patientInfo: "рз░рзЛржЧрзАрз░ рждржерзНржп",
        patientName: "рз░рзЛржЧрзАрз░ ржирж╛ржо",
        patientNamePlaceholder: "рз░рзЛржЧрзАрз░ ржирж╛ржо ржжрж┐ржпрж╝ржХ",
        age: "ржмржпрж╝рж╕",
        agePlaceholder: "ржмржпрж╝рж╕",
        village: "ржЧрж╛ржБржУ",
        villagePlaceholder: "ржЧрж╛ржБржУ ржмрж╛ржЫржХ",
        contactNumber: "ржпрзЛржЧрж╛ржпрзЛржЧ ржиржорзНржмрз░",
        contactNumberPlaceholder: "ржлрзЛржи ржиржорзНржмрз░",
        symptomsTitle: "рж▓ржХрзНрж╖ржг (ржкрзНрз░ржпрзЛржЬрзНржп рж╕ржХрж▓рзЛ ржмрж╛ржЫржХ)",
        additionalNotes: "ржЕрждрж┐рз░рж┐ржХрзНржд ржирзЛржЯ",
        additionalNotesPlaceholder: "ржпрж┐ржХрзЛржирзЛ ржЕрждрж┐рз░рж┐ржХрзНржд ржкрз░рзНржпржмрзЗржХрзНрж╖ржг ржмрж╛ ржирзЛржЯ...",
        submitButton: "ржкрзНрз░рждрж┐ржмрзЗржжржи ржжрж╛ржЦрж┐рж▓ ржХрз░ржХ",
        submitting: "ржжрж╛ржЦрж┐рж▓ рж╣рзИ ржЖржЫрзЗ...",
        successMessage: "рж▓ржХрзНрж╖ржг ржкрзНрз░рждрж┐ржмрзЗржжржи рж╕ржлрж▓ржнрж╛рз▒рзЗ ржжрж╛ржЦрж┐рж▓ рж╣рзИржЫрзЗ!",
        errorMessage: "ржкрзНрз░рждрж┐ржмрзЗржжржи ржжрж╛ржЦрж┐рж▓ ржХрз░рж╛ржд рждрзНрз░рзБржЯрж┐ред ржЕржирзБржЧрзНрз░рж╣ ржХрз░рж┐ ржкрзБржирз░ ржЪрзЗрж╖рзНржЯрж╛ ржХрз░ржХред",
      },
    },
  },
  {
    code: "bn",
    name: "ржмрж╛ржВрж▓рж╛",
    nativeName: "ржмрж╛ржВрж▓рж╛",
    flag: "ЁЯЗоЁЯЗ│",
    translations: {
      hero: {
        title: "рж╕рзНржорж╛рж░рзНржЯ рж╕рзНржмрж╛рж╕рзНржерзНржп ржирж┐рж░рзАржХрзНрж╖ржг ржУ ржкрзНрж░рж╛ржержорж┐ржХ рж╕рждрж░рзНржХрждрж╛",
        subtitle:
          "ржнрж╛рж░ржд ржЬрзБржбрж╝рзЗ ржЙржирзНржиржд ржЬржирж╕рзНржмрж╛рж╕рзНржерзНржп ржлрж▓рж╛ржлрж▓рзЗрж░ ржЬржирзНржп AI-ржЪрж╛рж▓рж┐ржд рж╕рзНржмрж╛рж╕рзНржерзНржп ржирж┐рж░рзАржХрзНрж╖ржг, рж░рж┐ржпрж╝рзЗрж▓-ржЯрж╛ржЗржо рж░рзЛржЧ ржЯрзНрж░рзНржпрж╛ржХрж┐ржВ ржПржмржВ ржнржмрж┐рж╖рзНржпржжрзНржмрж╛ржгрзАржорзВрж▓ржХ ржмрж┐рж╢рзНрж▓рзЗрж╖ржгрзЗрж░ рж╕рж╛ржерзЗ рж╕ржорзНржкрзНрж░ржжрж╛ржпрж╝ржЧрзБрж▓рж┐ржХрзЗ ржХрзНрж╖ржорждрж╛ржпрж╝ржиред",
        exploreBtn: "ржбрзНржпрж╛рж╢ржмрзЛрж░рзНржб ржжрзЗржЦрзБржи",
        learnBtn: "ржЖрж░ржУ ржЬрж╛ржирзБржи",
      },
      nav: {
        home: "рж╣рзЛржо",
        features: "ржмрзИрж╢рж┐рж╖рзНржЯрзНржп",
        dashboard: "ржбрзНржпрж╛рж╢ржмрзЛрж░рзНржб",
        aiDetection: "AI рж╕ржирж╛ржХрзНрждржХрж░ржг",
        about: "ржЖржорж╛ржжрзЗрж░ рж╕ржорзНржкрж░рзНржХрзЗ",
        contact: "ржпрзЛржЧрж╛ржпрзЛржЧ",
        symptoms: "рж▓ржХрзНрж╖ржг",
      },
      symptoms: {
        title: "рж▓ржХрзНрж╖ржг ржкрзНрж░рждрж┐ржмрзЗржжржи",
        subtitle: "рж░рзЛржЧрзАрж░ рж▓ржХрзНрж╖ржг ржПржмржВ ржорзМрж▓рж┐ржХ рж╕рзНржмрж╛рж╕рзНржерзНржп рж╕рзВржЪржХ рж░рзЗржХрж░рзНржб ржХрж░рзБржиред",
        patientInfo: "рж░рзЛржЧрзАрж░ рждржерзНржп",
        patientName: "рж░рзЛржЧрзАрж░ ржирж╛ржо",
        patientNamePlaceholder: "рж░рзЛржЧрзАрж░ ржирж╛ржо рж▓рж┐ржЦрзБржи",
        age: "ржмржпрж╝рж╕",
        agePlaceholder: "ржмржпрж╝рж╕",
        village: "ржЧрзНрж░рж╛ржо",
        villagePlaceholder: "ржЧрзНрж░рж╛ржо ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи",
        contactNumber: "ржпрзЛржЧрж╛ржпрзЛржЧ ржиржорзНржмрж░",
        contactNumberPlaceholder: "ржлрзЛржи ржиржорзНржмрж░",
        symptomsTitle: "рж▓ржХрзНрж╖ржг (ржкрзНрж░ржпрзЛржЬрзНржп рж╕ржмржЧрзБрж▓рзЛ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи)",
        additionalNotes: "ржЕрждрж┐рж░рж┐ржХрзНржд ржирзЛржЯ",
        additionalNotesPlaceholder: "ржпрзЗржХрзЛржирзЛ ржЕрждрж┐рж░рж┐ржХрзНржд ржкрж░рзНржпржмрзЗржХрзНрж╖ржг ржмрж╛ ржирзЛржЯ...",
        submitButton: "ржкрзНрж░рждрж┐ржмрзЗржжржи ржЬржорж╛ ржжрж┐ржи",
        submitting: "ржЬржорж╛ рж╣ржЪрзНржЫрзЗ...",
        successMessage: "рж▓ржХрзНрж╖ржг ржкрзНрж░рждрж┐ржмрзЗржжржи рж╕ржлрж▓ржнрж╛ржмрзЗ ржЬржорж╛ рж╣ржпрж╝рзЗржЫрзЗ!",
        errorMessage: "ржкрзНрж░рждрж┐ржмрзЗржжржи ржЬржорж╛ ржжрж┐рждрзЗ рждрзНрж░рзБржЯрж┐ред ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред",
      },
    },
  },
]

// Language Context
const LanguageContext = React.createContext<{
  currentLanguage: string
  setLanguage: (lang: string) => void
  t: (key: string) => string
}>({
  currentLanguage: "en",
  setLanguage: () => {},
  t: () => "",
})

export function LanguageProvider({ children }: { children: React.ReactNode }) {
  const [currentLanguage, setCurrentLanguage] = React.useState("en")

  React.useEffect(() => {
    const saved = localStorage.getItem("healthwatch-language")
    if (saved && languages.find((lang) => lang.code === saved)) {
      setCurrentLanguage(saved)
    }
  }, [])

  const setLanguage = (langCode: string) => {
    setCurrentLanguage(langCode)
    localStorage.setItem("healthwatch-language", langCode)
  }

  const t = (key: string) => {
    const lang = languages.find((l) => l.code === currentLanguage)
    if (!lang) return key

    const keys = key.split(".")
    let value: any = lang.translations

    for (const k of keys) {
      value = value?.[k]
    }

    return value || key
  }

  return <LanguageContext.Provider value={{ currentLanguage, setLanguage, t }}>{children}</LanguageContext.Provider>
}

export function useLanguage() {
  const context = React.useContext(LanguageContext)
  if (!context) {
    throw new Error("useLanguage must be used within a LanguageProvider")
  }
  return context
}

export function LanguageSwitcher() {
  const { currentLanguage, setLanguage } = useLanguage()
  const [mounted, setMounted] = React.useState(false)

  React.useEffect(() => {
    setMounted(true)
  }, [])

  if (!mounted) {
    return null
  }

  const handleLanguageChange = (langCode: string) => {
    setLanguage(langCode)
  }

  const currentLang = languages.find((lang) => lang.code === currentLanguage)

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button variant="ghost" size="sm" className="h-9 px-2">
          <Globe className="h-4 w-4 mr-2" />
          <span className="hidden sm:inline">{currentLang?.nativeName}</span>
          <span className="sm:hidden">{currentLang?.flag}</span>
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent align="end" className="w-48">
        {languages.map((language) => (
          <DropdownMenuItem
            key={language.code}
            onClick={() => handleLanguageChange(language.code)}
            className="cursor-pointer flex items-center justify-between"
          >
            <div className="flex items-center">
              <span className="mr-2">{language.flag}</span>
              <span>{language.nativeName}</span>
            </div>
            {currentLanguage === language.code && <Check className="h-4 w-4 text-primary" />}
          </DropdownMenuItem>
        ))}
      </DropdownMenuContent>
    </DropdownMenu>
  )
}
